#ifndef NIEDERREITER_POLY_H
#define NIEDERREITER_POLY_H

#include <stdlib.h>
#include "word.h"

/** f $= sparse_polynomial()
 * 
 * \param[out] f          Binary polynomial
 * \param[in]  weight     Number of indices set in f
 * \param[in]  max_index  Largest index 
 * \param[in]  index_mask 2^ceil(log_2(max_index)) - 1
 *
 * The numbers are generated by rejection sampling. This is in
 * non-constant time, but it only leaks how many generated random
 * numbers were discarded, either because they were outside the
 * (publicly known) range or because there was a collision.
 */
void poly_gen_sparse(
    index_t *f, size_t weight,
    index_t max_index,
    index_t index_mask);

/** f (dense) := g (sparse)
 *
 * Convert sparse polynomial to dense polynomial.
 */
void poly_to_dense(
    word_t *f, size_t words,
    const index_t *g, size_t indices);

/** f := f^{-1}
 *
 * \return error code: 0 on success, -1 on failure
 */
int poly_inv(word_t *f);

/** f := g * h */
void poly_mul(
          word_t *f,
    const word_t *g,
    const word_t *h);

#endif /* NIEDERREITER_POLY_H */
