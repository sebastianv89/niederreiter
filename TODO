- Implementation (see the TODO's that are sprinkled everywhere)
- Almost all size_t indices can be replaced with idx_t
   - if idx_t can index all bits, then surely it can index all bytes
   - unsigned char is always enough for POLY_COUNT (but should be
     verified by a test)
   - uint16_t is always enough for WEIGHT (ERROR and POLY) (but should
     be verified by a test)
- Change types
  - pubkey_t -> sys_parch_t
  - privkey_t -> parch_t
- Index bits must be dynamic!
- Testing
  - Self-test
    - sensible constants
      - r prime
      - index bits fit (need a spare bit!)
    - composition == identity functions    
      - pack/unpack
      - f * (1/f)
      - enc/dec
        - KEM
        - KEM/DEM
    - compare const-time functions with non-const time functions
      - xgcd
      - poly_compare
      - 
  - Comparison with sage reference implementation
- README
- LICENSE
- Documentation
  - Doxygen
- Makefile
- The implementation should cover two designs:
  - ANSI C / Supercop
    - main function: encryption (KEM/DEM)
    - use crypto_uintN types (N \in {8, 16, 32, 64})
    - randombytes.h
    - unsigned long long for indexing 
  - OQS
    - main function: key-exchange (KEM)
    - use inttypes.h (size \in {8, 16, 32, 64})
    - oqs/randombytes.h
    - size_t for indexing
  - Although more combinations of the above choices are possible,
    they are not covered by the different settings that can be
    specified with preprocessor definitions and must be manually
    implemented.
  - This does not cover the optimization of clmul.
    - Preferably, the compiler detects if clmul exists on the target
      platform and falls back to a slower implementation if necesary.
- #ifdef __cplusplus; extern c; #endif (?)
